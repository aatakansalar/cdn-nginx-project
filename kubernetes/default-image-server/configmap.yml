apiVersion: v1
kind: ConfigMap
metadata:
  name: frontend-config
data:
  nginx.conf: |
    user root;

    load_module modules/ngx_http_image_filter_module.so;

    worker_processes auto;
    error_log /usr/local/openresty/nginx/logs/error.log debug;
    pid /usr/local/openresty/nginx/logs/nginx.pid;

    events {
        worker_connections 1024;
        multi_accept on;
    }

    http {
        lua_shared_dict cache_lock 10m;

        include       mime.types;
        default_type  application/octet-stream;

        lua_package_path "/etc/nginx/lua/?.lua;;";

        log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                          '$status $body_bytes_sent "$http_referer" "$http_user_agent" '
                          '"$http_x_forwarded_for" cache_status=$upstream_cache_status';

        access_log /usr/local/openresty/nginx/logs/access.log main;

        sendfile        on;
        keepalive_timeout  65;

        # Gzip Settings
        gzip on;
        gzip_disable "msie6";

        # Map to determine if resizing is needed
        map $arg_width$arg_height $resize {
            default       0;
            ~.+           1;
        }

        # Validation maps for dimensions
        map $arg_width $validated_width {
            default   800;
            ~^\d+$    $arg_width;
        }

        map $arg_height $validated_height {
            default   600;
            ~^\d+$    $arg_height;
        }

        # Shared memory zones for rate limiting
        limit_req_zone $binary_remote_addr zone=resizing_zone:10m rate=65535/s;
        limit_conn_zone $binary_remote_addr zone=conn_limit_per_ip:10m;

        include /etc/nginx/conf.d/*.conf;
    }
  frontend.conf: |
    server {
        listen 80;
        server_name frontend;

        resolver kube-dns.kube-system.svc.cluster.local;

        add_header X-Cache-Status $upstream_cache_status always;

        location /stub_status {
            stub_status;
            allow all;
        }
        location /images/ {
            set $cache_key $scheme$host$request_uri;

            content_by_lua_block {
                local cache = require "redis_cache"
                local cache_key = ngx.var.cache_key

                -- Redis cache'den almaya çalış
                local res = cache.get(cache_key)
                if res then
                    ngx.header["X-Cache-Status"] = "HIT"
                    ngx.header["Content-Type"] = "image/jpeg" 
                    ngx.print(res)
                    return
                end

                -- Cache'de yoksa, resmi al ve cache'e kaydet
                local res = ngx.location.capture("/fetch_and_cache")
                if res.status ~= 200 then
                    ngx.status = res.status
                    ngx.say("Error fetching image: ", res.body)
                    return
                end

                -- Redis'e kaydet
                cache.set(cache_key, res.body, 86400) -- Cache for 24 hours

                ngx.header["X-Cache-Status"] = "MISS"
                ngx.header["Content-Type"] = "image/jpeg"
                ngx.print(res.body)
            }

            add_header Content-Disposition 'inline; filename=$uri' always;
            add_header Cache-Control "public, max-age=43200" always;
        }

        location /fetch_and_cache {
            internal;

            proxy_pass http://image-origin.default.svc.cluster.local:5000$request_uri;

            # İçerik tipi ayarla
            types { }
            default_type image/jpeg;
        }
    }
  redis_cache.lua: |
    local redis = require "resty.redis"

    local function cache_get(cache_key)
        local red = redis:new()
        red:set_timeout(1000) -- 1 second timeout

        -- Connect to Redis
        local ok, err = red:connect("redis.default.svc.cluster.local", 6379)
        if not ok then
            ngx.log(ngx.ERR, "Failed to connect to Redis: ", err)
            return nil
        end

        local res, err = red:get(cache_key)
        if not res then
            ngx.log(ngx.ERR, "Failed to get key from Redis: ", err)
            return nil
        end

        if res == ngx.null then
            return nil
        end

        return res
    end

    local function cache_set(cache_key, data, ttl)
        local red = redis:new()
        red:set_timeout(1000) -- 1 second timeout

        local ok, err = red:connect("redis.default.svc.cluster.local", 6379)
        if not ok then
            ngx.log(ngx.ERR, "Failed to connect to Redis: ", err)
            return
        end

        local ok, err = red:setex(cache_key, ttl, data)
        if not ok then
            ngx.log(ngx.ERR, "Failed to set key in Redis: ", err)
        end
    end

    return {
        get = cache_get,
        set = cache_set,
    }
